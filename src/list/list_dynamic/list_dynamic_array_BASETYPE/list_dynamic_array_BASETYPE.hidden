#ifndef _LISTA_DYNAMIC_BASETYPE_HIDDEN
#define _LISTA_DYNAMIC_BASETYPE_HIDDEN

#include "../../../util/defines_typedef.h"

/* FUNZIONAMENTO
 * E' la versione piu' "classica" della lista. Ogni elemento (spiegato meglio
 * dopo nel typedef) contiene il valore da salvare e l'indirizzo all'elemento
 * successivo.
 * C'e' quindi solo un piccolo overhead dovuto al puntatore all'elemento successivo
 * per ogni elemento della lista.
 *
 * Nel pensare alle funzioni ho trovato che spesso era utile un elemento dummy.
 * Siccome l'elemento dummy contiene un paddr, un size e un puntatore all'elemento
 * successivo, posso mettere l'indirizzo dell'ultimo elemento (utile per inserimento
 * in coda) nel pvoid, il numero di elementi della lista nel size e nel puntatore
 * all'elemento successivo l'indirizzo del primo elemento "vero".
 *
 * La lista_leggera diventa cosi' semplicemente un puntatore a elem.
 *
 * L'ultimo elemento della lista e' contrassegnato da un NULL come pnext
 * */


typedef struct _list_dynamic_array_BASETYPE {
    pvoid pstart;
    pvoid pend;
    unsi n_elem;
    unsi size_array;
  } list_dynamic_array_BASETYPE;

typedef list_dynamic_array_BASETYPE* plist_dynamic_array_BASETYPE;

#endif
