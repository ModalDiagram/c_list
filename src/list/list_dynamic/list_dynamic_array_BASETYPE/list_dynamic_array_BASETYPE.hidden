#ifndef _LISTA_DYNAMIC_BASETYPE_HIDDEN
#define _LISTA_DYNAMIC_BASETYPE_HIDDEN

#include "../../../util/defines_typedef.h"

/* FUNZIONAMENTO
 * E' la versione piu' "classica" della lista. Ogni elemento (spiegato meglio
 * dopo nel typedef) contiene il valore da salvare e l'indirizzo all'elemento
 * successivo.
 * C'e' quindi solo un piccolo overhead dovuto al puntatore all'elemento successivo
 * per ogni elemento della lista.
 *
 * L'ultimo elemento della lista e' contrassegnato da un NULL come pnext
 * */

/* CARATTERISTICA LISTA DI ARRAY:
 * non posso creare una struttura corrispondente agli elementi della lista perche'
 * questa dovrebbe avere dimensione variabile in base alla lunghezza dell'array contenuto.
 * Allora gestisco la memoria manualmente:
 * 1) per ogni elemento alloco la memoria di sizeof(tipo)*size_array + sizeof(pvoid)
 * 2) per scrivere il valore uso memcpy(elem, array_input, sizeof(tipo)*size_array)
 *    cosi' da copiare l'intero array preso in input
 * 3) Per leggere e scrivere l'indirizzo dell'elemento successivo non uso elem->pnext,
 *    ma GET_PNEXT(elem), dove PNEXT e' definito nel .c e consiste nello spostarsi
 *    di sizeof(tipo)*size_array e leggere il valore successivo come pvoid
 * */


/* list_dynamic_array_BASETYPE: struttura che contiene le informazioni sulla lista
 * pstart:               indirizzo del primo elemento della lista
 * pend:                 indirizzo dell'ultimo elemento della lista
 * n_elem:               numero di elementi contenuti nella lista
 * */
typedef struct _list_dynamic_array_BASETYPE {
  pvoid pstart;
  pvoid pend;
  unsi n_elem;
  unsi sizeof_array;
 } list_dynamic_array_BASETYPE;

typedef list_dynamic_array_BASETYPE* plist_dynamic_array_BASETYPE;

#endif
