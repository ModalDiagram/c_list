#ifndef _LIST_TABLE_ARRAY_BASETYPE_HIDDEN
#define _LIST_TABLE_ARRAY_BASETYPE_HIDDEN

#include "./../../../util/defines_typedef.h"
#include "./../../../util/defines_typedef.hidden"

/* FUNZIONAMENTO
 * E' piu' veloce della lista_leggera perche' lavoriamo con una tabella e i suoi
 * indici invece che con puntatori ad elementi.
 *
 * Supponiamo di avere due lista_veloce:
 * 1) X->Y->Z
 * 2) X->Y
 * e indichiamo con ADD1X l'indirizzo dell'elemento X della lista_veloce 1.
 *
 * La tabella sara' del tipo:
 *
         pvoid         unsi           int
         paddr         size           idx
     +-----------+---------------+-----------+
     |  qualunque|    qualunque  |  type_    |
 0   |  cosa     |    cosa       |  resize   |
     +-----------+---------------+-----------+
     |           |               |           |
 1   |  ADD2Y    |    SIZE2Y     |    0      |
     |           |               |           |
     +-----------+---------------+-----------+
     |           |               |           |
 2   |   ADD1X   |    SIZE1X     |    4      |
     |           |               |           |
     +-----------+---------------+-----------+
     |           |               |           |
 3   |   ADD1Z   |    SIZE1Z     |    0      |
     |           |               |           |
     +-----------+---------------+-----------+
     |           |               |           |
 4   |   ADD1Y   |    SIZE1Y     |    3      |
     |           |               |           |
     +-----------+---------------+-----------+
     |  qualunque|    qualunque  |           |
 5   |  cosa     |    cosa       |    0      |
     +-----------+---------------+-----------+
     |           |               |           |
 6   |   ADD2X   |    SIZE2X     |    1      |
     +-----------+---------------+-----------+
 *
 *
 * Ogni lista e' individuata da un intero, l'indice del primo elemento,
 * da cui attraverso il campo idx si possono ottenere tutti gli elementi successivi
 * fino all'ultimo che ha per idx 0 (il primo elemento e' inutilizzabile e ha
 * per idx_next il type_resize della tabella).
 *
 * La lista 1 e' individuata dall'intero 2, la lista 2 da 6.
 *
 * All'interno della tabella c'e' in realta' una terza lista: la lista dei vuoti.
 * La lista dei vuoti serve ad ottenere il primo posto libero nella tabella.
 * I suoi elementi non hanno particolari campi paddr e size ma solo idx.
 * In questo esempio la lista dei vuoti e' individuata dall'indice 5 ed ha un solo elemento.
 *
 * Al momento di inserire un elemento possiamo scriverlo all'indice 0
 * e cambiare l'indice di partenza della lista dei vuoti in 0, indicando che non
 * c'e' piu' spazio.
 *
 * All'istanziamento di liste successive possiamo utilizzare la stessa tabella solo
 * per array con lo stesso numero di elementi.
 * Allora salvo static una lista di tabelle e in fase di allocazione cerco se esiste una
 * tabella della dimensione appropriata e la salvo nella struct della lista.
 */

/* CARATTERISTICA LISTA DI ARRAY:
 * non posso creare una struttura corrispondente agli elementi della lista perche'
 * questa dovrebbe avere dimensione variabile in base alla lunghezza dell'array contenuto.
 * Allora gestisco la memoria manualmente:
 * 1) ogni elemento della tabella occupa la memoria di sizeof(tipo)*size_array + sizeof(unsi)
 * 2) per scrivere il valore uso memcpy(elem_table, array_input, sizeof(tipo)*size_array)
 *    cosi' da copiare l'intero array preso in input
 * 3) Per leggere e scrivere l'indice dell'elemento successivo non uso elem->idx_next,
 *    ma GET_PNEXT(elem_table), dove GET_PNEXT e' definito nel .c e consiste nello spostarsi
 *    di sizeof(tipo)*size_array e leggere il valore successivo come unsigned
 * */

/* STRUTTURA LISTA:
 * tecnicamente basterebbe l'indice del primo elemento per individuare la lista.
 * Tuttavia, se salviamo anche l'indice dell'ultimo elemento della lista, l'inserimento in
 * coda diventa O(1) invece di O(N). Per questo l'utente esterno vedra' la lista come
 * pvoid che punta a una struttura lista_idx contentente gli indici del primo
 * e ultimo elemento.
 *
 * La struttura contiene anche il numero di elementi della lista per funzioni
 * di aiuto come print_lista ed eventuali controlli in funzioni come
 * insert_nth e extract_nth.
 *
 * Contiene in questo caso (a differenza delle altre classi) anche l'indirizzo della table
 * perche' non e' la stessa per tutti gli array ma dipende dalla loro dimensione.
 * */
typedef struct _list_table_array_BASETYPE {
  unsi idx_start;
  unsi idx_end;
  unsi n_elem;
  pvoid ptable;
 } list_table_array_BASETYPE;
typedef list_table_array_BASETYPE* plist_table_array_BASETYPE;

/* info_table:    struct che contiene le informazioni della tabella. E' posta in memoria subito
 *             prima della tabella, quindi la ottengo da
 *             pmy_info = (pinfo_table) plist->ptable;
 *             e ottengo la lista vera e propria con
 *             ptable = pmy_info + 1;
 * sizeof_array:  size degli array contenuti (data da n_elem*sizeof(tipo))
 * idx_void_list: indice di inizio della lista dei vuoti della tabella (ne serve
 *                uno per ogni tabella)
 * n_entries:  numero di spazi totali della tabella
 * n_occupied: numero di spazi della tabella occupati attualmente
 *
 * A differenza delle altre classi non la metto prima della tabella perche' dovrei
 * calcolare comunque ogni volta idx_void_list, che qui non posso mettere static
 * */
typedef struct _table_info_array_BASETYPE {
  pvoid plist_of_lists;
  pvoid plist_of_occupations;
  double pmoving_window[DIM_MOVING_WINDOW];
  unsi  n_insert;
  unsi sizeof_array;
  unsi idx_void_list;
  unsi n_entries;
  unsi n_occupied;
 } table_info_array_BASETYPE;
typedef table_info_array_BASETYPE* ptable_info_array_BASETYPE;

/* Di seguito le funzioni usate internamente: */

/* create_table: alloca la memoria della tabella
 * dim:          numero di elementi della tabella, ovvero di possibili elementi totali
 *               delle liste della tabella
 *
 * return:       torna l'indirizzo della tabella
 * */
pvoid create_table_array_BASETYPE(unsi size_array, type_resize type_resize, unsi dim);

/* pfind_table: funzione con cui trovare la tabella con dimensione corretta
 * value1:      intero corrispondente alla size degli array da cercare
 * size1:       non importa
 * value2:      indirizzo della tabella da cercare, posso prendere la dimensione degli
 *              array contenuti con ((pinfo_table) ptable)->size_array
 * size2:       non importa
 * presult:     vi scrive 0 quando l'intero in value1 e' uguale alla dimensione degli
 *              array in value2
 * */
int pfind_table_array_BASETYPE(all_type value1, unsi size1,
                               all_type value2, unsi size2);

/* copy_list: copia una lista da una table a un'altra
 * ptable_dest: table in cui copiare la lista
 * idx_void_list_dest: indirizzo in cui legge e scrive l'idx_void_list della tabella
 *                     di destinazione
 * ptable_orig:        table da cui copiare la lista
 * idx_void_list_orig: indirizzo in cui legge e scrive l'idx_void_list della tabella
 *                     di partenza
 * idx_start:          indirizzo di partenza della lista da copiare
 * */
int copy_list_array_BASETYPE(pvoid ptable_dest, punsi pidx_void_list_dest,
                             pvoid ptable_orig, punsi pidx_void_list_orig,
                             unsi idx_start, unsi size_array);

void print_table_array_BASETYPE(plist_table_array_BASETYPE plist);

int print_list_of_lists_array_BASETYPE(all_type plist, unsi size);

void manage_moving_window_array_BASETYPE(pvoid pinfo_table);

int expand_table_fit_array_BASETYPE(plist_table_array_BASETYPE plist);

#endif
